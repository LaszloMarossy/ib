spring.application.name=ibbe
server.tomcat.accesslog.enabled=true
server.port=8080

# frequency of fxTradesDisplayData update (for UI) in seconds
displaydata.freq=1
# show # of bids/asks
displaydata.topx=10
# internal trades queue size maintained
internal.bitso.trades.queue.size=10
# internal trades queue size maintained
internal.bitso.trades.set.size=20
# show/get # of trades
displaydata.numberoftrades=10
# REST polling trades frequency in seconds
poller.interval.recenttrades=5
poller.interval.orderbook=5
poller.interval.xchrate=20
poller.default.xchrate=20.06145
# consecutive # of DOWNs
trade.down_n=3
# consecutive # of UPs
trade.up_m=2
# server URL where the javaFX connects to the back-end with REST
server.rest.url=http://localhost:8080
# server URL where the javaFX connects to the back-end with WS
server.ws.url=ws://localhost:8080/websocket
# server URL of Bitso websocket endpoints
bitso.ws.url=wss://ws.bitso.com/
# server URL of Bitso websocket endpoints
kafka.url=localhost:9092
# the name of the deployment
#server.deployment=/itsybitsobackend-1.0-SNAPSHOT
server.deployment=/
# root of the WS deployment on the local server
server.ws.root=
# starting balance in currency
starting.bal.currency=2000
# starting balance in btc
starting.bal.coin=0.02
# long/short term moving average base (over this number of trades)
ltma=20
stma=5
# buy amount unit
buy.amt=0.0002
# sell amount unit
sell.amt=0.0002
# xchange api key
xchange.key=1b1c8b26d3c5f84fdac97ce9a3308321
# xchange url
xchange.url=http://apilayer.net/api/live?access_key=1b1c8b26d3c5f84fdac97ce9a3308321&currencies=MXN&format=1
# get bitso trades URL
bitso.get.trades.url=https://api.bitso.com/v3/trades/?book=btc_mxn&limit=
# get bitso order books URL
bitso.get.orderbook.url=https://api.bitso.com/v3/order_book/?book=btc_mxn&aggregate=true

# Logging configuration
logging.level.root=INFO
logging.level.com.ibbe=INFO
logging.bridge.jul.enabled=true

# Kafka configuration
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=trades-group
spring.kafka.consumer.auto-offset-reset=earliest
# Set to true to enable Kafka
spring.kafka.enabled=true
# Set very high consumer session timeout (1 hour)
spring.kafka.consumer.properties.session.timeout.ms=3600000
# Set very high heartbeat interval (20 minutes)
spring.kafka.consumer.properties.heartbeat.interval.ms=1200000
# Set high request timeout
spring.kafka.consumer.properties.request.timeout.ms=1800000
# Add reconnection settings
spring.kafka.consumer.properties.reconnect.backoff.ms=1000
spring.kafka.consumer.properties.reconnect.backoff.max.ms=30000
spring.kafka.consumer.properties.retry.backoff.ms=1000
# Add producer settings
spring.kafka.producer.properties.reconnect.backoff.ms=1000
spring.kafka.producer.properties.reconnect.backoff.max.ms=30000
spring.kafka.producer.properties.retry.backoff.ms=1000
spring.kafka.producer.properties.request.timeout.ms=30000
spring.kafka.producer.properties.delivery.timeout.ms=120000
spring.kafka.producer.properties.retries=10
spring.kafka.producer.properties.acks=all
spring.kafka.producer.properties.enable.idempotence=true






